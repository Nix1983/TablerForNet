@namespace TablerForNet.Components
@inject IJSRuntime JSRuntime
@inject TablerService tabService
@inject ToastService ToastService

<div class="card">
    @if (!_isInit && UsePlaceHolder)
    {
        <p class="placeholder-glow text-center m-2">
            @for (int i = 0; i < PlaceHolderRows; i++)
            {
                <span class="placeholder col-12"></span>
                <span class="placeholder col-10"></span>
                <span class="placeholder col-8"></span>
            }
        </p>
    }
    else
    {
        <div class="row" dir="ltr">
            <div class="col-11">

                <pre>
                <code class="language-@(Language.ToString().ToLower())">@Code</code>                  
                        </pre>


            </div>
            @if (ShowCopyButton)
            {
                <div class="col-1">
                    <div class="codeblock-copy d-flex justify-content-end">
                        <div @onclick="(() => CopyToClipboard(Code))" class="cursor-pointer">
                            <Icon IconType="TablerIcons.Copy" TextColor="@(_isClicked ? TablerColor.Teal : TablerColor.Secondary)" />
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public string Code { get; set; } = string.Empty;

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public bool ShowCopyButton { get; set; } = true;

    [Parameter]
    public bool ShowToast { get; set; } = true;

    [Parameter]
    public string ToastText { get; set; } = "Code copied";

    [Parameter]
    public CodeLanguage Language { get; set; } = CodeLanguage.Html;

    [Parameter]
    public bool UsePlaceHolder { get; set; } = false;

    [Parameter]
    public int PlaceHolderRows { get; set; } = 1;

    [Parameter]
    public bool ShowFullCode { get; set; } = false;

    [Parameter]
    public int MaxCodeLines { get; set; } = 10;

    private bool _isClicked = false;
    private bool _isInit = false;
    private int _linesCount;
    private bool _expandCode = false;

    protected override Task OnInitializedAsync()
    {
        _linesCount = Code.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries).Length;
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isInit = true;
            await InvokeAsync(StateHasChanged);
            await JSRuntime.InvokeVoidAsync("highlightCode");
        }
    }

    private string GetLimitedCode()
    {
        var lines = Code.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
        var l = string.Join(Environment.NewLine, lines.Take(MaxCodeLines));
        return l;
    }

    private async Task ToggleFullCode()
    {

        await JSRuntime.InvokeVoidAsync("highlightCode");
        _expandCode = !_expandCode;

    }

    private async Task CopyToClipboard(string code)
    {
        await tabService.CopyToClipboard(code);

        if (ShowToast)
        {
            try
            {
                _isClicked = true;
                await InvokeAsync(StateHasChanged);

                var options = new ToastOptions
                    {
                        Delay = 1,
                        ShowProgress = true,
                        ShowHeaderClose = false,
                        ShowHeader = false
                    };
                await ToastService.AddToastAsync(new ToastModel { Title = string.Empty, SubTitle = "", Message = ToastText, Options = options });
            }
            finally
            {
                await Task.Delay(500);
                _isClicked = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

}


