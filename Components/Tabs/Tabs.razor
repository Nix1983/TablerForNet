@namespace TablerForNet.Components
@inherits TabBase

<div class="card">
    <CascadingValue Value="@this">
        <div class="card-header" role="tablist">
            <ul class="nav nav-tabs card-header-tabs @(FullWidthTabs ? "nav-fill": "") @(GetAlignmentClass())" data-toggle="tabs">
                @ChildContent
            </ul>
        </div>
    </CascadingValue>

    <div class="card-body">
        <div class="tab-content">
            <div class="tab-pane active show" role="tabpanel" id="@ActiveTab?.Title-id">
                <div> @ActiveTab?.ChildContent</div>
            </div>
        </div>
    </div>
</div>


@code {
    private List<Tab> TabsList = new List<Tab>();

    [Parameter] public bool FullWidthTabs { get; set; } = false;
    [Parameter] public TabAlignment Alignment { get; set; } = TabAlignment.Left;
    public Tab? ActiveTab { get; private set; }

    public async Task AddTab(Tab tab)
    {
        TabsList.Add(tab);
        if (ActiveTab == null)
        {
            await SetActivateTab(tab);
        }
    }

    public async Task RemoveTab(Tab tab)
    {
        TabsList.Remove(tab);
        if (ActiveTab == tab)
        {
            await SetActivateTab(null);
        }
    }

    public async Task SetActivateTab(Tab? tab)
    {
        if (tab == null)
        {
            ActiveTab = null;
            await InvokeAsync(StateHasChanged);
            return;
        }

        if (ActiveTab != tab)
        {
            ActiveTab = tab;
            await InvokeAsync(StateHasChanged);
        }
    }

    public void ActivateAlternativeTab(Tab deactivatedTab)
    {

        if (TabsList.Count <= 1) return;


        int index = TabsList.IndexOf(deactivatedTab);


        if (index > 0 && !TabsList[index - 1].IsDisabled)
        {
            SetActivateTab(TabsList[index - 1]);
            return;
        }

        for (int i = index + 1; i < TabsList.Count; i++)
        {
            if (!TabsList[i].IsDisabled)
            {
                SetActivateTab(TabsList[i]);
                return;
            }
        }
    }

    private string GetAlignmentClass()
    {
        return Alignment switch
        {
            TabAlignment.Left => "",
            TabAlignment.Right => "justify-content-end",
            TabAlignment.Center => "justify-content-center",
            _ => ""
        };
    }
}
