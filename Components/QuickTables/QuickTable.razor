@typeparam TGridItem

<CascadingValue TValue="InternalGridContext<TGridItem>" IsFixed="true" Value="@internalGridContext">
    @{ StartCollectingColumns(); }
    @ChildContent
    <Defer>
        @{ FinishCollectingColumns(); }
        <ColumnsCollectedNotifier TGridItem="TGridItem"/>
        <div class="table-responsive @Class">
            <table class="table table-vcenter card-table quick-table" theme="@Theme" aria-rowcount="@(ariaBodyRowCount + 1)" @ref="tableReference">
                <thead>
                <tr>
                    @renderColumnHeaders
                </tr>
                </thead>
                <tbody>
                @if (Virtualize)
                {
                    <Virtualize @ref="@VirtualizeComponent"
                                TItem="(int RowIndex, TGridItem Data)"
                                ItemSize="@ItemSize"
                                ItemsProvider="@ProvideVirtualizedItems"
                                ItemContent="@(item => builder => RenderRow(builder, item.RowIndex, item.Data))"
                                Placeholder="@(placeholderContext => builder => RenderPlaceholderRow(builder, placeholderContext))"/>
                }
                else
                {
                    @renderNonVirtualizedRows
                }
                </tbody>
            </table>
        </div>
    </Defer>
</CascadingValue>

@code {

    private void RenderNonVirtualizedRows(RenderTreeBuilder __builder)
    {
        var initialRowIndex = 2; // aria-rowindex is 1-based, plus the first row is the header
        var rowIndex = initialRowIndex;
        foreach (var item in currentNonVirtualizedViewItems)
        {
            RenderRow(__builder, rowIndex++, item);
        }

        // When pagination is enabled, by default ensure we render the exact number of expected rows per page,
        // even if there aren't enough data items. This avoids the layout jumping on the last page.
        // Consider making this optional.
        if (Pagination is not null)
        {
            while (rowIndex++ < initialRowIndex + Pagination.ItemsPerPage)
            {
                <tr></tr>
            }
        }
    }

    private void RenderRow(RenderTreeBuilder __builder, int rowIndex, TGridItem item)
    {
        <tr @key="@(ItemKey(item))" aria-rowindex="@rowIndex">
            @foreach (var col in columns)
            {
                <td class="@ColumnClass(col)" @key="@col">
                    @{ col.CellContent(__builder, item); }
                </td>
            }
        </tr>
    }

    private void RenderPlaceholderRow(RenderTreeBuilder __builder, PlaceholderContext placeholderContext)
    {
        <tr aria-rowindex="@(placeholderContext.Index + 1)">
            @foreach (var col in columns)
            {
                <td class="grid-cell-placeholder @ColumnClass(col)" @key="@col">
                    @{ col.RenderPlaceholderContent(__builder, placeholderContext); }
                </td>
            }
        </tr>
    }

    private void RenderColumnHeaders(RenderTreeBuilder __builder)
    {
        foreach (var col in columns)
        {
            <th class="@ColumnHeaderClass(col)" aria-sort="@AriaSortValue(col)" @key="@col" scope="col">
                <div class="col-header-content">@col.HeaderContent</div>

                @if (col == displayOptionsForColumn)
                {
                    <div class="col-options">@col.ColumnOptions</div>
                }

                @if (ResizableColumns)
                {
                    <div class="col-width-draghandle"></div>
                }
            </th>
        }
    }

}