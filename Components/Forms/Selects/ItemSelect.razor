@namespace TablerForNet.Components
@typeparam TItem
@typeparam TValue
@inherits TablerBaseComponent
@implements IDisposable

@if (!string.IsNullOrWhiteSpace(Label))
{
    <label class="form-label">@Label</label>
}

<Dimmer Active="Disabled" ShowSpinner="false">
    <div @onkeydown="OnKey" @onkeydown:stopPropagation="dropdown?.IsExpanded==true" class="@FieldCssClasses">
        <Dropdown @ref="dropdown" CloseOnClick="false" OnExpanded="DropdownExpanded">
            <ChildContent>
                <div @onkeydown:preventDefault="dropdown?.IsExpanded==true">
                    @if (SelectedTemplate != null)
                    {
                        @SelectedTemplate(selectedItems)
                    }
                    else
                    {
                        <div class="input-group input-group-flat">
                            <div class="form-control form-select @FieldCssClasses" tabindex="0">
                                @if (!selectedItems.Any())
                                {
                                    @NoSelectedText
                                }
                                else if (singleSelect)
                                {
                                    <span>@GetSelectedText(selectedItems.First())</span>
                                }
                                else
                                {
                                    <div class="badge-list">
                                        @foreach (var selectedItem in selectedItems)
                                        {
                                            <Badge BackgroundColor="TablerColor.Primary">@GetSelectedText(selectedItem) <span @onclick:stopPropagation @onclick="@(()=> RemoveSelected(selectedItem))"><Icon class="ms-2" Size="16" IconType="@InternalIcons.X"></Icon></span></Badge>
                                        }
                                    </div>
                                }
                            </div>

                            @if (Clearable)
                            {
                                <span class="input-group-text" @onclick:stopPropagation @onclick="ClearSelected">
                                    <Icon class="icon cursor-pointer" IconType="@InternalIcons.X" />
                                </span>
                            }
                        </div>
                    }
                </div>
            </ChildContent>
            <DropdownTemplate>
                <DropdownMenu Disposed="OnDropdownMenuClosed" class="@DropdownMenuCss" style="@GetListStyle()">
                    @if (showSearch)
                    {
                        <div class="m-2">
                            <div class="input-group input-group-flat">
                                <input @ref="SearchInput" class="form-control" @bind="searchText" type="text" @bind:event="oninput" placeholder="@SearchPlaceholderText">
                                <span class="input-group-text">

                                    @if (!string.IsNullOrWhiteSpace(searchText))
                                    {
                                        <Icon IconType="@InternalIcons.X" class="icon" OnClick="ClearSearch" />
                                    }
                                    else
                                    {
                                        <Icon IconType="@InternalIcons.Search" class="icon cursor-auto" />
                                    }
                                </span>
                            </div>
                        </div>
                    }

                    @if (HeaderTemplate != null)
                    {
                        <div class="cursor-auto">
                            @HeaderTemplate
                        </div>
                    }


                    @if (Items != null && Items.Any())
                    {
                        <VirtualizeOptional Items="FilteredList()" Virtualize=Virtualize>
                            <DropdownItem Highlight="IsHighlighted(context)" Active="IsSelected(context)" Disabled="(!CanSelect() && !IsSelected(context)) || IsDisabled(context)" OnClick="(e => ToogleSelected(context))" @key="context">

                                @if (ShowCheckBoxes)
                                {
                                    <input class="form-check-input m-0 me-2" checked="@IsSelected(context)" type="checkbox">
                                }
                                @if (ListTemplate == null)
                                {
                                    @context.ToString()
                                }
                                else
                                {
                                    @ListTemplate(context)
                                }

                            </DropdownItem>
                        </VirtualizeOptional>
                    }
                    else
                    {
                        <span>@NoItemsText</span>
                    }

                    @if (FooterTemplate != null)
                    {
                        <div class="cursor-auto">
                            @FooterTemplate
                        </div>
                    }

                </DropdownMenu>
            </DropdownTemplate>
        </Dropdown>
    </div>
</Dimmer>

@code {
    /// <summary>
    /// List of items
    /// </summary>
    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    /// <summary>
    /// Text to be displayed when no item is selected
    /// </summary>
    [Parameter]
    public string NoSelectedText { get; set; } = "*Select*";

    [Parameter] public string NoItemsText { get; set; }
    [Parameter] public bool ShowCheckBoxes { get; set; }
    [Parameter] public bool MultiSelect { get; set; }
    [Parameter] public bool Virtualize { get; set; }

    [Parameter] public List<TValue> SelectedValues { get; set; }
    [Parameter] public EventCallback<List<TValue>> SelectedValuesChanged { get; set; }
    [Parameter] public Expression<Func<IList<TValue>>> SelectedValuesExpression { get; set; }

    [Parameter] public TValue SelectedValue { get; set; }
    [Parameter] public EventCallback<TValue> SelectedValueChanged { get; set; }
    [Parameter] public Expression<Func<TValue>> SelectedValueExpression { get; set; }

    [Parameter] public EventCallback Changed { get; set; }
    [Parameter] public EventCallback<bool> OnExpanded { get; set; }

    [Parameter] public Func<TItem, string> SelectedTextExpression { get; set; }
    [Parameter] public Func<TItem, string> IdExpression { get; set; }
    [Parameter] public Func<TItem, TValue> ConvertExpression { get; set; }
    [Parameter] public Func<TItem, bool> DisabledExpression { get; set; }
    [Parameter] public RenderFragment<TItem> ListTemplate { get; set; }
    [Parameter] public RenderFragment<List<TItem>> SelectedTemplate { get; set; }
    [Parameter] public RenderFragment FooterTemplate { get; set; }
    [Parameter] public RenderFragment HeaderTemplate { get; set; }
    [Parameter] public bool Clearable { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool RemoveSelectedFromList { get; set; }
    [Parameter] public int MaxSelectableItems { get; set; } = int.MaxValue;
    [Parameter] public Func<string, IEnumerable<TItem>> SearchMethod { get; set; }
    [Parameter] public string SearchPlaceholderText { get; set; }
    [Parameter] public string MaxListHeight { get; set; }
    [Parameter] public string ListWidth { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public string DropdownMenuCss { get; set; }

    private bool FocusSearch;
    private ElementReference searchInput;
    private ElementReference SearchInput
    {
        get => searchInput;
        set
        {
            searchInput = value;
            FocusSearch = true;
        }
    }

    [CascadingParameter] private EditContext CascadedEditContext { get; set; }

    [Inject] private IJSRuntime jSRuntime { get; set; }
    private string userAgent = null;
    private bool isFirefoxBrowser => userAgent.Contains("Firefox", StringComparison.InvariantCultureIgnoreCase);

    private bool showSearch => SearchMethod != null;
    private bool singleSelect => MaxSelectableItems == 1 || !MultiSelect;
    private List<TItem> selectedItems = new();
    private Dropdown dropdown;
    private string searchText;
    private TItem highlighted;
    private FieldIdentifier? fieldIdentifier;
    private string FieldCssClasses;
    private string[] ExpandKeys = { "Enter", " ", "ArrowDown" };

    protected override void OnInitialized()
    {
        if (ConvertExpression == null)
        {
            if (typeof(TItem) != typeof(TValue))
            {
                throw new InvalidOperationException(
                    $"{GetType()} requires a {nameof(ConvertExpression)} parameter.");
            }

            ConvertExpression = item => item is TValue value ? value : default;
        }

        if (MultiSelect && SelectedValuesExpression != null)
        {
            fieldIdentifier = FieldIdentifier.Create(SelectedValuesExpression);
        }

        if (!MultiSelect && SelectedValueExpression != null)
        {
            fieldIdentifier = FieldIdentifier.Create(SelectedValueExpression);
        }

        if (CascadedEditContext != null)
        {
            CascadedEditContext.OnValidationStateChanged += SetValidationClasses;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (FocusSearch)
        {
            SearchInput.FocusAsync();
            FocusSearch = false;
        }

        if (fieldIdentifier is not FieldIdentifier fid) { return; }
        CascadedEditContext?.NotifyFieldChanged(fid);
        CascadedEditContext?.Validate();
    }

    private void SetValidationClasses(object sender, ValidationStateChangedEventArgs args)
    {
        if (fieldIdentifier is not FieldIdentifier fid) { return; }
        FieldCssClasses = CascadedEditContext?.FieldCssClass(fid) ?? "";
    }

    protected override void OnParametersSet()
    {
        if (selectedItems == null)
        {
            selectedItems = new List<TItem>();
        }

        selectedItems.Clear();

        //TODO How to handle if the items are in the provided list
        if (MultiSelect && SelectedValues != null)
        {
            if (typeof(TItem) == typeof(TValue))
            {
                selectedItems = SelectedValues.Cast<TItem>().ToList();
            }
            else
            {
                foreach (var selectedValue in SelectedValues)
                {
                    AddSelectItemFromValue(selectedValue);
                }
            }
        }
        else if (!MultiSelect && SelectedValue != null)
        {
            AddSelectItemFromValue(SelectedValue);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender && userAgent == null)
        {
            userAgent = await jSRuntime.InvokeAsync<string>("TheNixApp.Tabler.getUserAgent");
        }
    }

    public bool IsExpanded => dropdown?.IsExpanded == true;

    private void DropdownExpanded(bool expanded)
    {
        OnExpanded.InvokeAsync(expanded);
    }

    private string GetListStyle()
    {
        var style = "";

        if (!string.IsNullOrWhiteSpace(MaxListHeight))
        {
            var overFlowStyle = isFirefoxBrowser ? "overflow-y:scroll;" : "overflow-y:overlay;";
            style = $"max-height:{MaxListHeight}; {overFlowStyle}";
        }

        if (!string.IsNullOrWhiteSpace(ListWidth))
        {
            style += $"width:{ListWidth}; overflow-x:overlay;border:none";
        }

        return style;
    }

    private void AddSelectItemFromValue(TValue value)
    {
        var item = Items.FirstOrDefault(e => EqualityComparer<TValue>.Default.Equals(ConvertExpression(e), value));
        if (item != null)
        {
            selectedItems.Add(item);
        }
    }

    protected List<TItem> FilteredList()
    {
        var filtered = Items;
        if (SearchMethod != null && !string.IsNullOrWhiteSpace(searchText))
        {
            filtered = SearchMethod(searchText).ToList();
        }

        if (RemoveSelectedFromList)
        {
            return filtered.Where(e => !selectedItems.Contains(e)).ToList();
        }

        if (highlighted is not null && !filtered.Contains(highlighted))
        {
            highlighted = default;
        }

        return filtered.ToList();
    }

    private void ClearSearch()
    {
        searchText = string.Empty;
    }

    private async Task OnKey(KeyboardEventArgs e)
    {
        if (!dropdown.IsExpanded && ExpandKeys.Contains(e.Key))
        {
            highlighted = default;
            dropdown.Open();
            SetHighlighted(1);
            return;
        }

        if (dropdown.IsExpanded)
        {
            if (e.Key == "Escape" || e.Key == "Tab")
            {
                highlighted = default;
                dropdown.Close();
            }
            else if (e.Key == "ArrowDown")
            {
                SetHighlighted(1);
            }
            else if (e.Key == "ArrowUp")
            {
                SetHighlighted(-1);
            }
            else if (e.Key == "Enter" && highlighted != null)
            {
                await ToogleSelected(highlighted);
                SetHighlighted(1);
            }
        }
    }

    private void SetHighlighted(int step)
    {
        var myList = FilteredList();

        if (highlighted == null)
        {
            highlighted = step > Decimal.Zero ? myList.FirstOrDefault() : myList.LastOrDefault();
        }
        else
        {
            var pos = myList.IndexOf(highlighted);
            pos += step;
            highlighted = myList.ElementAtOrDefault(pos);

            if (highlighted is null)
            {
                SetHighlighted(step);
            }
        }

        if (!CanSelect() && highlighted != null && !IsSelected(highlighted))
        {
            SetHighlighted(step);
        }
    }

    private string GetSelectedText(TItem item)
    {
        if (SelectedTextExpression == null) return item.ToString();
        return SelectedTextExpression.Invoke(item);
    }

    private bool IsDisabled(TItem item)
    {
        return DisabledExpression != null && DisabledExpression(item);
    }

    private bool CanSelect()
    {
        return singleSelect || MaxSelectableItems > selectedItems.Count;
    }

    private TValue GetValue(TItem item)
    {
        return ConvertExpression.Invoke(item);
    }

    private bool IsHighlighted(TItem item)
    {
        if (highlighted == null)
        {
            return false;
        }

        if (IdExpression != null)
        {
            return IdExpression.Invoke(highlighted) == IdExpression.Invoke(item);
        }

        return highlighted.Equals(item);
    }

    private bool IsSelected(TItem item)
    {
        if (IdExpression != null)
        {
            return selectedItems.FirstOrDefault(e => IdExpression.Invoke(e) == IdExpression.Invoke(item)) != null;
        }

        return selectedItems.Contains(item);
    }

    protected async Task RemoveSelected(TItem item)
    {
        if (IsSelected(item))
        {
            selectedItems.Remove(item);
        }

        dropdown.Close();
        await UpdateChanged();
    }

    public async Task ClearSelected()
    {
        selectedItems.Clear();
        dropdown.Close();
        await UpdateChanged();
    }

    protected async Task ToogleSelected(TItem item)
    {
        if (singleSelect)
        {
            selectedItems.Clear();
        }

        if (IsSelected(item))
        {
            selectedItems.Remove(item);
        }
        else
        {
            selectedItems.Add(item);

            if (singleSelect || !CanSelect())
            {
                dropdown.Close();
            }
        }

        await UpdateChanged();
    }

    private async Task UpdateChanged()
    {
        var selectedValues = new List<TValue>();
        selectedValues = selectedItems.Select(GetValue).ToList();
        await SelectedValuesChanged.InvokeAsync(selectedValues);

        if (!MultiSelect)
        {
            await SelectedValueChanged.InvokeAsync(selectedValues.FirstOrDefault());
        }

        await Changed.InvokeAsync();

        if (fieldIdentifier is FieldIdentifier fid)
        {
            CascadedEditContext?.NotifyFieldChanged(fid);
        }
    }

    public void Dispose()
    {
        if (CascadedEditContext != null)
        {
            CascadedEditContext.OnValidationStateChanged -= SetValidationClasses;
        }
    }

    private void OnDropdownMenuClosed()
    {
        highlighted = default;
        ClearSearch();
    }
}
