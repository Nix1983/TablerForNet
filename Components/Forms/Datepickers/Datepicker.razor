@typeparam TValue
@namespace TablerForNet.Components
@inherits TablerBaseComponent


@if (!string.IsNullOrWhiteSpace(Label))
{
    <label class="form-label">@Label</label>
}

@if (Inline)
{
    @RenderCalender
}
else
{
    <Dropdown CloseOnClick="false" @ref="dropdown">
        <ChildContent>
            <div class="input-icon">
                <input type="text" class="form-control cursor-pointer" value="@selectedDate?.ToString(Format)" placeholder="Search…">
                <span class="input-icon-addon cursor-pointer">
                    <Icon class="icon"
                          IconType="@InternalIcons.Calendar" />
                </span>
            </div>
        </ChildContent>

        <DropdownTemplate>
            <DropdownMenu>
                <div class="m-2">
                    @RenderCalender
                </div>
            </DropdownMenu>

        </DropdownTemplate>
    </Dropdown>
}

@code {

    private RenderFragment RenderCalender => __builder =>
    {
        <div class="datepicker @(!Inline ? "datepicker-dropdown": "")">
            <div class="datepicker-month">
                <span class="float-start">
                    <Icon OnClick="SetPreviousMonth" class="cursor-pointer"
                          IconType="@InternalIcons.Arrow_left" />
                </span>
                <span>@GetCurrentMonth()</span>
                <span>@currentDate.Year</span>
                <span class="float-end">
                    <Icon OnClick="SetNextMonth" class="cursor-pointer"
                          IconType="@InternalIcons.Arrow_right" />
                </span>
            </div>
            <div class="datepicker-weekdays">
                @foreach (var weekday in GetWeekdays())
                {
                    <div @key="weekday">
                        @weekday
                    </div>
                }
            </div>
            <div class="datepicker-days">

                @foreach (var date in GetDates())
                {
                    <span @key="date" @onclick="(() => SetSelected(date))" class="@DayCss(date)">@date.Day</span>
                }

            </div>
        </div>
    };

    [Parameter] public bool Inline { get; set; }
    [Parameter] public string Format { get; set; } = "d";
    [Parameter] public TValue SelectedDate { get; set; }
    [Parameter] public EventCallback<TValue> SelectedDateChanged { get; set; }
    [Parameter] public string Label { get; set; }

    private TValue value;
    private DateTimeOffset currentDate = DateTimeOffset.Now;
    private DateTimeOffset? selectedDate;
    private TablerColor selectedColor = TablerColor.Primary;
    private CultureInfo culture => CultureInfo.CurrentCulture;

    private Dropdown dropdown;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (!EqualityComparer<TValue>.Default.Equals(value, SelectedDate))
        {
            value = SelectedDate;

            await SetSelected(ConvertToDateTimeOffset(SelectedDate));

        }
    }

    private TValue ConvertToTValue(DateTimeOffset? value)
    {
        var type = typeof(TValue);
        if (type == typeof(DateTimeOffset) || type == typeof(DateTimeOffset?))
        {
            return (TValue)(object)value;
        }
        else if (type == typeof(DateTime) || type == typeof(DateTime?))
        {
            return (TValue)(object)value?.DateTime;
        }

        return default;
    }

    private DateTimeOffset? ConvertToDateTimeOffset(TValue value)
    {
        var type = typeof(TValue);
        if (type == typeof(DateTimeOffset) || type == typeof(DateTimeOffset?))
        {
            return value as DateTimeOffset?;
        }
        else if (type == typeof(DateTime) || type == typeof(DateTime?))
        {
            var dateTime = value as DateTime?;
            DateTimeOffset? newDate = dateTime;
            return newDate;
        }

        else
        {
            throw new SystemException("Type must be of type DateTime or DateTimeOffset");
        }
    }

    private string[] GetWeekdays()
    {
        var names = culture.DateTimeFormat.AbbreviatedDayNames;
        var first = (int)culture.DateTimeFormat.FirstDayOfWeek;
        return names.Skip(first).Take(names.Length - first).Concat(names.Take(first)).ToArray();
    }

    private string GetCurrentMonth()
    {
        return currentDate.ToString("MMMM", culture.DateTimeFormat);
    }

    private void SetPreviousMonth()
    {
        currentDate = currentDate.AddMonths(-1);
    }
    private void SetNextMonth()
    {
        currentDate = currentDate.AddMonths(1);
    }

    private DateTimeOffset FirstDateInWeek(DateTimeOffset dt)
    {
        while (dt.DayOfWeek != culture.DateTimeFormat.FirstDayOfWeek)
            dt = dt.AddDays(-1);
        return dt;
    }

    private List<DateTimeOffset> GetDates()
    {
        var dates = new List<DateTimeOffset>();
        var firstDayOfMonth = currentDate.Date.AddDays(1 - currentDate.Day);
        var firstDate = FirstDateInWeek(firstDayOfMonth);
        for (int i = 0; i < 42; i++)
        {
            dates.Add(firstDate);
            firstDate = firstDate.AddDays(1);
        }

        return dates;
    }

    private async Task SetSelected(DateTimeOffset? date)
    {
        selectedDate = date;
        if (date != null && !IsCurrentMonth(date))
        {
            currentDate = (DateTimeOffset)date;
        }
        value = ConvertToTValue(selectedDate);

        await SelectedDateChanged.InvokeAsync(value);
        if (!Inline && dropdown != null)
        {
            dropdown.Close();
        }
    }

    private bool IsCurrentMonth(DateTimeOffset? date)
    {
        return date?.Month == currentDate.Month;
    }
    private bool IsSelected(DateTimeOffset? date)
    {
        if (selectedDate == null || date == null) { return false; }
        return selectedDate?.Date == date?.Date;
    }

    private string DayCss(DateTimeOffset? date)
    {
        return new ClassBuilder()
        .Add("datepicker-day")
        .AddIf("datepicker-not-month", !IsCurrentMonth(date))
        .AddIf("datepicker-day-dropdown", !Inline)
        .AddIf("strong", date?.Date == DateTimeOffset.Now.Date)
        .AddIf(selectedColor.GetColorClass("bg") + " text-white", IsSelected(date))
        .ToString();

    }
}

