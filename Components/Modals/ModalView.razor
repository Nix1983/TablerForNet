@namespace TablerForNet.Components
@inherits ComponentBase
@implements IDisposable
@inject TablerService TablerService
@inject IModalService ModalService

@if (Options.Backdrop)
{
    <div class="modal-backdrop fade show" />
}

<div class="modal @(Options.BlurBackground ? "modal-blur": "") fade show" id="TheNixApp.Tabler-modal-container" @ref="BlurContainer" @onkeydown="OnKeyDown" @onclick="OnClickOutside"
     tabindex="-1" style="display: block; z-index: @modalViewSettings.ZIndex" aria-hidden="true">
    <div class="@GetModalCss()" role="document" @ondragend="OnDragEnd" @ondragstart="OnDragStart"
         style=@(GetModalStyle()) @ref="dragContainer">
        <div class="modal-content @(Options.DarkMode ? "theme-dark": "")" style="border:solid; border-color:@Options.BorderColor; max-height:@Options.MaxHeigth; max-width:@Options.MaxWidth">

            @if (Options.StatusColor != null)
            {
                <div class="modal-status @(((TablerColor)Options.StatusColor).GetColorClass("bg"))"></div>
            }
            @if (Options.HeaderComponent != null)
            {
                @Options.HeaderComponent
            }
            @if (Options.ShowHeader)
            {
                <div class="modal-header @(Options.Draggable ? "cursor-move": "") @(Options.DarkMode ? "theme-dark": "")" style="color:@Options.TitleTextColor">
                    @if (Options.IsTitleLeftIcon)
                    {
                        <Icon TextColor="@Options.TitleLeftIconColor" IconType="Options.TitleLeftIcon" Size="Options.TitleLeftIconSize" />
                    }
                    <h5 class="modal-title">@Title</h5>
                    @if (Options.IsTitleRightIcon)
                    {
                        <Icon TextColor="@Options.TitleRightIconColor" IconType="Options.TitleRightIcon" Size="Options.TitleRightIconSize" />
                    }
                    @if (Options.ShowCloseButton)
                    {
                        <div class="container d-flex justify-content-end" style="margin-right:-45px;">
                            <Badge Size="BadgeSize.Large" BackgroundColor="TablerColor.Danger" aria-label="Close" @onclick="Close">
                                <Icon IconType="MDIcons.Close" Size="20" />
                            </Badge>
                        </div>
                    }
                </div>
            }

            <div class="modal-body @(Options.DarkMode ? "theme-dark": "")" @ref="contentContainer" @onclick:stopPropagation @onkeydown:stopPropagation>
                <div style="margin-top:10px;">
                    @ChildContent
                </div>
            </div>
            @if (Options.FooterComponent != null)
            {
                @Options.FooterComponent
            }
        </div>
    </div>
</div>

@code {

    [Parameter] public string Title { get; set; }
    [Parameter] public ModalOptions Options { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public EventCallback OnClosed { get; set; }

    public string HeaderCssClass { get; private set; }
    private ElementReference BlurContainer;
    protected ElementReference dragContainer { get; set; }
    protected ElementReference contentContainer { get; set; }

    private bool isDragged;
    private bool isInitialized;

    private double startX, startY, offsetX, offsetY;
    private ModalViewSettings modalViewSettings;

    protected override void OnInitialized()
    {
        modalViewSettings = ModalService.RegisterModalView(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!isInitialized)
        {
            await TablerService.OpenModal();
            await BlurContainer.FocusAsync();
            if (Options.Draggable)
            {
                await TablerService.SetElementProperty(dragContainer, "draggable", true);
                await TablerService.DisableDraggable(dragContainer, contentContainer);
            }
            isInitialized = true;
        }
    }

    public async void Close()
    {
        await TablerService.CloseModal();
        await OnClosed.InvokeAsync();
    }

    private string GetModalStyle()
    {
        return isDragged ? $"position:absolute; top: {offsetY}px; left: {offsetX}px;" : $"top: {modalViewSettings.TopOffset}px";
    }

    private void OnDragStart(DragEventArgs args)
    {
        if (!Options.Draggable) { return; }

        if (!isDragged)
        {
            offsetX = args.ClientX - args.OffsetX;
            offsetY = args.ClientY - args.OffsetY;
        }
        startX = args.ClientX;
        startY = args.ClientY;
    }

    private void OnDragEnd(DragEventArgs args)
    {
        if (!Options.Draggable) { return; }

        isDragged = true;
        offsetX += args.ClientX - startX;
        offsetY += args.ClientY - startY;
    }

    protected void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape" && Options.CloseOnEsc)
        {
            Close();
        }
    }

    protected void OnClickOutside(MouseEventArgs e)
    {
        if (Options.CloseOnClickOutside)
        {
            Close();
        }
    }

    protected string GetModalCss() => new ClassBuilder()
            .Add("modal-dialog")
            .AddIf("modal-sm", Options.Size == ModalSize.Small)
            .AddIf("modal-lg", Options.Size == ModalSize.Large)
            .AddIf("modal-xl", Options.Size == ModalSize.XLarge)
            .AddIf("modal-max", Options.Size == ModalSize.Maximized)
            .AddIf("modal-fullscreen", Options.Fullscreen == ModalFullscreen.Allways)
            .AddIf("modal-fullscreen-sm-down", Options.Fullscreen == ModalFullscreen.BelowSmall)
            .AddIf("modal-fullscreen-md-down", Options.Fullscreen == ModalFullscreen.BelowMedium)
            .AddIf("modal-fullscreen-lg-down", Options.Fullscreen == ModalFullscreen.BelowLarge)
            .AddIf("modal-fullscreen-xl-down", Options.Fullscreen == ModalFullscreen.BelowXLarge)
            .AddIf("modal-fullscreen-xxl-down", Options.Fullscreen == ModalFullscreen.BelowXXLarge)
            .AddIf("modal-dialog-scrollable", Options.Scrollable)
            .AddIf("modal-dialog-centered", Options.VerticalPosition == ModalVerticalPosition.Centered)
            .ToString();

    public void Dispose()
    {
        ModalService.UnRegisterModalView(this);
    }
}