@namespace TablerForNet.Components
@inject IModalService ModalService

@if (isEnumerable)
{
    <Table Item=ObjectItem Items=listItems Responsive PageSize=10>
    <HeaderTemplate>
        <h3>@objectType.FullName</h3>
    </HeaderTemplate>
    <ChildContent>
        <Column Item=ObjectItem Property="e=> e.Object" Title="" Width="1%">
            <Template>
                <PropertyValueLink PropertyValue=context.Object>
                    <Icon class="text-muted" Size="16" IconType="InternalIcons.Search" />
                </PropertyValueLink>
            </Template>
        </Column>

        @foreach (var property in properties)
            {
                <Column Item=ObjectItem Title="@property.Name" Property="e=>e.Object" Searchable SearchExpression="(e, s) => SearchObject(e,s)">
                <Template>
                    <PropertyValueLink PropertyValue=context.GetPropertyValue(property) />
                </Template>
                </Column>
            }
        </ChildContent>

    </Table>
}
else if (objectItem != null)
{
    @if (!objectItem.Properties.Any())
    {
        <span> @objectItem.Object</span>
    }
    else
    {
        <DataGrid>
            @foreach (var property in objectItem.Properties)
            {
                <DataGridItem>
                    <TitleTemplate>
                        <span title="@property.PropertyType.FullName">@property.Name</span>
                    </TitleTemplate>
                    <ChildContent>
                        <PropertyValueLink PropertyValue=objectItem.GetPropertyValue(property) />
                    </ChildContent>
                </DataGridItem>
            }
        </DataGrid>
    }
}

@code{


    [Parameter] public object Object { get; set; }

    private Type objectType;
    private List<PropertyInfo> properties = new();
    private bool isEnumerable;

    private ObjectItem objectItem;
    private List<ObjectItem> listItems = new();


    protected override void OnInitialized()
    {
        if (Object == null)
        {
            return;
        }

        isEnumerable = IsEnumerable(Object.GetType());
        objectType = GetAnyElementType(Object.GetType());
        properties = objectType.GetProperties().ToList();

        if (isEnumerable)
        {
            foreach (var item in (IEnumerable)Object)
            {
                listItems.Add(new ObjectItem(item, properties));
            }
        }
        else
        {
            objectItem = new ObjectItem(Object, properties);
        }
    }

    private bool SearchObject(ObjectItem objectItem, string searchText)
    {
        return objectItem.SearchValues(searchText);
    }

    private bool IsEnumerable(Type type)
    {
        if (typeof(string) == type) { return false; }
        return typeof(IEnumerable).IsAssignableFrom(type);
    }

    private static Type GetAnyElementType(Type type)
    {
        // Type is Array
        // short-circuit if you expect lots of arrays
        if (type.IsArray)
            return type.GetElementType();

        // type is IEnumerable<T>;
        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(IEnumerable<>))
            return type.GetGenericArguments()[0];

        // type implements/extends IEnumerable<T>;
        var enumType = type.GetInterfaces()
                                .Where(t => t.IsGenericType &&
                                       t.GetGenericTypeDefinition() == typeof(IEnumerable<>))
                                .Select(t => t.GenericTypeArguments[0]).FirstOrDefault();
        return enumType ?? type;
    }

    private async Task ObjectDetails(object myObject)
    {
        var component = new RenderComponent<ObjectBrowser>().Set(e => e.Object, myObject);
        var result = await ModalService.ShowAsync(myObject.GetType().Name, component, new ModalOptions { Size = ModalSize.XLarge });
    }
}





