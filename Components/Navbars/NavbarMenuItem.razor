@namespace TablerForNet.Components
@inherits TablerBaseComponent
@implements IDisposable

<div class="navbar-item cursor-pointer @(IsDropdown && !isDropEnd ? "dropdown": "") @(IsDropdown && isDropEnd ? "dropend":"")">

    <a class="@(isSubMenu ? "dropdown-item":"nav-link") @(IsDropdown ? "dropdown-toggle": "")" @onclick="ToogleDropdown" href="@Href" lang="@Language" @onclick:stopPropagation=IsDropdown>

        @if (MenuItemIcon != null)
        {
            <span class="nav-link-icon d-md-none d-lg-inline-block">
                @MenuItemIcon
            </span>
        }

        <span class="nav-link-title">
            @if (ChildContent != null)
            {
                @ChildContent
            }
            else
            {
                @Text
            }
        </span>
    </a>

    @if (SubMenu != null && isExpanded && Expandable)
    {
        <CascadingValue Value="this" Name="Parent">
            <ul data-bs-popper="none" class="dropdown-menu show @(NavbarIsHorizontalAndDark ? "bg-dark text-muted" : "")">
                @SubMenu
            </ul>
        </CascadingValue>
    }

</div>

@code {

    [CascadingParameter(Name = "Navbar")] Navbar Navbar { get; set; }
    [CascadingParameter(Name = "Parent")] NavbarMenuItem ParentMenuItem { get; set; }

    [Parameter] public string Href { get; set; }
    [Parameter] public string Text { get; set; }
    [Parameter] public string Language { get; set; }
    [Parameter] public RenderFragment MenuItemIcon { get; set; }
    [Parameter] public RenderFragment SubMenu { get; set; }
    [Parameter] public bool Expanded { get; set; }
    [Parameter] public bool Expandable { get; set; } = true;

    public bool IsTopMenuItem => ParentMenuItem == null;

    protected string HtmlTag => "li";
    protected bool isExpanded;
    protected bool IsDropdown => SubMenu != null && Expandable;

    protected bool isSubMenu => ParentMenuItem != null;

    protected override void OnInitialized()
    {
        isExpanded = Expanded;
        Navbar?.AddNavbarMenuItem(this);
    }

    private bool NavbarIsHorizontalAndDark => Navbar?.Background == NavbarBackground.Dark && Navbar?.Direction == NavbarDirection.Horizontal;

    private bool isDropEnd => Navbar.Direction == NavbarDirection.Horizontal && ParentMenuItem?.IsDropdown == true;

    public void CloseDropdown()
    {
        isExpanded = false;
    }

    public void ToogleDropdown()
    {
        var expand = !isExpanded;

        if (expand && IsTopMenuItem)
        {
            Navbar.CloseAll();
        }

        isExpanded = expand;
    }

    public void Dispose()
    {
        Navbar?.RemoveNavbarMenuItem(this);
    }
}

