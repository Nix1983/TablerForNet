@namespace TablerForNet.Components
@inherits NavbarBase
@implements IDisposable

<div class="navbar-item cursor-pointer @(IsDropdown ? (isDropEnd ? "dropend" : "dropdown") : "")">

    @if (Href != null)
    {
        <a class="@(isSubMenu ? "dropdown-item" : "nav-link") @(IsDropdown ? "dropdown-toggle" : "")"
        @onclick="ToogleDropdown" href="@Href" title="@LinkTitle" lang="@Language" @onclick:stopPropagation="@(Disabled || IsDropdown)">

            @if (MenuItemIcon != null)
            {
                <span class="nav-link-icon d-md-none d-lg-inline-block @(Disabled ? "disabled":"")">@MenuItemIcon</span>
            }
            <span class="nav-link @(Disabled ? "disabled":"")">
                @if (ChildContent != null)
                {
                    @ChildContent
                }
                else
                {
                    @Text
                }
            </span>
        </a>
    }
    else
    {
        <div class="@(isSubMenu ? "dropdown-item" : "nav-link") @(IsDropdown ? "dropdown-toggle" : "")"
        @onclick="ToogleDropdown" @onclick:stopPropagation="@(Disabled || IsDropdown)">

            @if (MenuItemIcon != null)
            {
                <span class="nav-link-icon d-md-none d-lg-inline-block @(Disabled ? "disabled":"")">@MenuItemIcon</span>
            }
            <span class="nav-link @(Disabled ? "disabled":"")">
                @if (ChildContent != null)
                {
                    @ChildContent
                }
                else
                {
                    @Text
                }
            </span>
        </div>
    }


    @if (SubMenu != null && isExpanded && Expandable)
    {
        <CascadingValue Value="this" Name="Parent">
            @if (Navbar?.Direction == NavbarDirection.Horizontal)
            {
                <ClickOutside OnClickOutside=@(()=>CloseDropdown()) Strategy="ClickOutside.RegisterStrategy.OnRender" Concurrence="ClickOutside.ConcurrenceStrategy.Many">
                    <div data-bs-popper="none" class="dropdown-menu show">
                        <div @onclick="ToogleDropdown">
                            @SubMenu
                        </div>
                    </div>
                </ClickOutside>
            }
            else
            {
                <div data-bs-popper="none" class="dropdown-menu show">
                    <div>
                        @SubMenu
                    </div>
                </div>
            }
        </CascadingValue>
    }
</div>


@code {

    [CascadingParameter(Name = "Navbar")] Navbar? Navbar { get; set; }
    [CascadingParameter(Name = "Parent")] NavbarMenuItem? ParentMenuItem { get; set; }

    [Parameter] public string? Href { get; set; }
    [Parameter] public string? LinkTitle { get; set; }
    [Parameter] public string Text { get; set; } = string.Empty;
    [Parameter] public string Language { get; set; } = string.Empty;
    [Parameter] public RenderFragment? MenuItemIcon { get; set; }
    [Parameter] public RenderFragment? SubMenu { get; set; }
    [Parameter] public bool Expanded { get; set; }
    [Parameter] public bool Expandable { get; set; } = true;
    [Parameter] public bool Disabled { get; set; } = false;

    public bool IsTopMenuItem => ParentMenuItem == null;

    protected bool isExpanded;
    protected bool IsDropdown => SubMenu != null && Expandable;

    protected bool isSubMenu => ParentMenuItem != null;

    protected override void OnInitialized()
    {
        isExpanded = Expanded;
        Navbar?.AddNavbarMenuItem(this);
    }

    private bool isDropEnd => Navbar?.Direction == NavbarDirection.Horizontal && ParentMenuItem?.IsDropdown == true;

    public void CloseDropdown()
    {
        isExpanded = false;
    }


    private async Task ToogleDropdown(MouseEventArgs e)
    {
        if (Disabled) return;

        var expand = !isExpanded;
        if (expand && IsTopMenuItem)
        {
            if (Navbar != null)
            {
                Navbar.ToogleExpand();
            }
        }

        await OnClick.InvokeAsync();
        isExpanded = expand;

    }

    public void Dispose()
    {
        Navbar?.RemoveNavbarMenuItem(this);
    }
}

