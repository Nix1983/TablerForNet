@namespace TablerForNet.Components
@inherits NavbarBase

<CascadingValue Name="Navbar" Value=this>

    @if (Direction == NavbarDirection.Horizontal)
    {
        <ClickOutside OnClickOutside=@(()=>OutsideClicked()) Strategy="ClickOutside.RegisterStrategy.OnRender" Concurrence="ClickOutside.ConcurrenceStrategy.Many">
            <div class="@(Sticky == NavbarPinned.StickyTop ? "sticky-top":"")
                        @(Sticky == NavbarPinned.StickyBottom ? "sticky-bottom":"")">
                <header class="navbar navbar-expand-md @(Overlap == NavBarOverlap.Overlap ? "navbar-overlap":"")
                                                   @(Sticky == NavbarPinned.StickyTop ? "sticky-top":"")
                                                   @(Sticky == NavbarPinned.StickyBottom ? "sticky-bottom":"")"
                        data-bs-theme="@(Background == NavbarBackground.Dark ? "dark" : "")">
                    <div class="container-xl">
                        <button class="navbar-toggler" type="button" @onclick="ToogleExpand" aria-label="Main menu toggler button">
                            <span class="navbar-toggler-icon"></span>
                        </button>
                        @ChildContent
                    </div>
                </header>
            </div>
        </ClickOutside>
    }
    else
    {
        <aside class="navbar navbar-expand-md navbar-vertical @(Direction == NavbarDirection.VerticalRight ? "navbar-right" : "")" data-bs-theme="@(Background == NavbarBackground.Dark ? "dark" : "")">
            <div class="container-xl">
                <button class="navbar-toggler" type="button" @onclick="ToogleExpand" aria-label="Main menu toggler button">
                    <span class="navbar-toggler-icon"></span>
                </button>
                @ChildContent
            </div>
        </aside>
    }
</CascadingValue>

@code {

    [Parameter] public NavbarBackground Background { get; set; }
    [Parameter] public NavbarDirection Direction { get; set; }
    [Parameter] public NavbarPinned Sticky { get; set; }
    [Parameter] public NavBarOverlap Overlap { get; set; }
    public bool IsExpanded = false;


    private List<NavbarMenuItem> navbarItems = new();

    public void ToogleExpand()
    {
        IsExpanded = !IsExpanded;
    }

    public void CloseAll()
    {
        foreach (var item in navbarItems.Where(e => e.IsTopMenuItem))
        {
            item.CloseDropdown();
        }

        StateHasChanged();
    }

    public void AddNavbarMenuItem(NavbarMenuItem item)
    {
        if (!navbarItems.Contains(item))
        {
            navbarItems.Add(item);
        }
    }

    public void RemoveNavbarMenuItem(NavbarMenuItem item)
    {
        if (navbarItems.Contains(item))
        {
            navbarItems.Remove(item);
        }
    }

    private async Task OutsideClicked()
    {
        await Task.Run(() =>
        {
            if (IsExpanded)
            {
                ToogleExpand();
            }
        });
    }
}