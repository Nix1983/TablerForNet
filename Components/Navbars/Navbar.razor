@namespace TablerForNet.Components
@inherits TablerBaseComponent
@inject NavigationManager NavigationManager
@implements IDisposable

<CascadingValue Name="Navbar" Value=this>

    <ClickOutside OnClickOutside=@(()=>OutsideClicked()) Strategy="ClickOutside.RegisterStrategy.OnRender" Concurrence="ClickOutside.ConcurrenceStrategy.Many">

        @if (Background == NavbarBackground.Dark)
        {
            <div class="navbar navbar-expand-md" data-bs-theme="dark">
                <div class="container-xl">
                    <button class="navbar-toggler" type="button" @onclick="ToogleExpand" aria-label="Main menu toggler button">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    @ChildContent
                </div>
            </div>
        }
        else
        {
            <div class="navbar navbar-expand-md">
                <div class="container-xl">
                    <button class="navbar-toggler" type="button" @onclick="ToogleExpand" aria-label="Main menu toggler button">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    @ChildContent
                </div>
            </div>
        }

    </ClickOutside>
</CascadingValue>

@code {

    [Parameter] public NavbarBackground Background { get; set; }
    [Parameter] public NavbarDirection Direction { get; set; }
    protected string HtmlTag => "div";
    public bool IsExpanded = false;

    private List<NavbarMenuItem> navbarItems = new();

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += LocationChanged;
        base.OnInitialized();
    }

    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (Direction == NavbarDirection.Horizontal)
        {
            CloseAll();
        }
    }

    protected override string ClassNames => ClassBuilder
          .Add("navbar navbar-expand-md")
          .AddIf("navbar-dark", Background == NavbarBackground.Dark)
          .AddIf("navbar-light", Background == NavbarBackground.Light)
         .AddIf("navbar-transparent", Background == NavbarBackground.Transparent)
          .AddIf("navbar-vertical", Direction == NavbarDirection.Vertical)
          .ToString();

    public void ToogleExpand()
    {
        IsExpanded = !IsExpanded;
    }

    public void CloseAll()
    {
        foreach (var item in navbarItems.Where(e => e.IsTopMenuItem))
        {
            item.CloseDropdown();
        }

        StateHasChanged();
    }

    public void AddNavbarMenuItem(NavbarMenuItem item)
    {
        if (!navbarItems.Contains(item))
        {
            navbarItems.Add(item);
        }
    }

    public void RemoveNavbarMenuItem(NavbarMenuItem item)
    {
        if (navbarItems.Contains(item))
        {
            navbarItems.Remove(item);
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= LocationChanged;
    }

    private async Task OutsideClicked()
    {
        await Task.Run(() =>
        {
            if (IsExpanded)
            {
                ToogleExpand();
            }
        });
    }
}