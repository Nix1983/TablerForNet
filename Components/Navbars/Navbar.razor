@namespace TablerForNet.Components
@inherits TablerBaseComponent
@inject NavigationManager NavigationManager

<CascadingValue Name="Navbar" Value=this>

    @if (Direction == NavbarDirection.Horizontal)
    {
        <ClickOutside OnClickOutside=@(()=>ToggleExpand()) Strategy="ClickOutside.RegisterStrategy.OnRender" Concurrence="ClickOutside.ConcurrenceStrategy.Many">

            <header class="navbar navbar-expand-md @(Overlap == NavBarOverlap.Overlap ? "navbar-overlap":"")
                                                @(Sticky == NavbarSticky.Top ? "sticky-top":"")
                                                @(Sticky == NavbarSticky.Bottom ? "sticky-bottom":"")"
                 data-bs-theme="@(Background == NavbarBackground.Dark ? "dark" : "")">
                <div class="container-xl">
                    <button class="navbar-toggler" type="button" @onclick="ToggleExpand" aria-label="Main menu toggler button">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    @ChildContent
                </div>
            </header>
        </ClickOutside>
    }
    else
    {
        <aside class="navbar navbar-expand-md navbar-vertical @(Direction == NavbarDirection.VerticalRight ? "navbar-right" : "")" data-bs-theme="@(Background == NavbarBackground.Dark ? "dark" : "")">
            <div class="container-xl">
                <button class="navbar-toggler" type="button" @onclick="ToggleExpand" aria-label="Main menu toggler button">
                    <span class="navbar-toggler-icon"></span>
                </button>
                @ChildContent
            </div>
        </aside>
    }
</CascadingValue>

@code {

    [Parameter] public NavbarBackground Background { get; set; }
    [Parameter] public NavbarDirection Direction { get; set; }
    [Parameter] public NavbarSticky Sticky { get; set; }
    [Parameter] public NavBarOverlap Overlap { get; set; }
    public bool IsExpanded = false;

    private List<NavbarMenuItem> navbarItems = new();

    public void AddNavbarMenuItem(NavbarMenuItem item)
    {
        if (!navbarItems.Contains(item))
        {
            navbarItems.Add(item);
        }
    }

    public void RemoveNavbarMenuItem(NavbarMenuItem item)
    {
        if (navbarItems.Contains(item))
        {
            navbarItems.Remove(item);
        }
    }


    public async Task ToggleExpand()
    {
        await Task.Run(() =>
        {
            if (IsExpanded)
            {
                IsExpanded = !IsExpanded;
            }
        });
    }
}