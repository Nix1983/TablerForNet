@namespace TablerForNet.Components
@inject ToastService ToastService
@implements IDisposable

<div class="toast show me-1 mb-1" role="alert" aria-live="assertive" aria-atomic="true" data-autohide="false" data-toggle="toast" style="border-color:@(Toast.Options.DarkMode ? "teal": "")">

    @if (Toast.Options.ShowHeader)
    {
        <div class="toast-header @(Toast.Options.DarkMode ? "theme-dark": "")" style="border:@(Toast.Options.DarkMode ? "none": "")">
            <strong class="me-auto">@Toast.Title</strong>
            <small>@Toast.SubTitle</small>
            @if (Toast.Options.ShowHeaderClose)
            {
                <button type="button" class="ms-2 btn-close" data-dismiss="toast" aria-label="Close" @onclick="() => ToastService.RemoveToastAsync(Toast)">
                </button>
            }
        </div>
    }

    <div class="toast-body @(Toast.Options.DarkMode ? "theme-dark": "")" style="border:@(Toast.Options.DarkMode ? "none": "")">

        @if (Toast.Contents != null)
        {
            <CascadingValue Value="this">
                @Toast.Contents
            </CascadingValue>
        }
        else
        {
            @Toast.Message
        }

    </div>


    @if (Toast.Options.AutoClose && Toast.Options.ShowProgress)
    {
        <div class="progress progress-sm" style="border:">
            <div class="progress-bar" style="width: @(_progress)%; transition:none; background-color:@(Toast.Options.DarkMode ? "teal": "");" />
        </div>
    }
    
</div>

@code{

    [Parameter] public ToastModel Toast { get; set; }

    private ToastTimer _countdownTimer;
    private int _progress = 100;

    protected override void OnInitialized()
    {
        if (Toast.Options.AutoClose)
        {
            _countdownTimer = new ToastTimer(Toast.Options.Delay * 1000);
            _countdownTimer.OnTick += CalculateProgress;
            _countdownTimer.Start();
        }
    }

    private async void CalculateProgress(int percentComplete)
    {
        _progress = 100 - percentComplete;
        if (percentComplete >= 100)
        {
            await Close();
        }
        await InvokeAsync(StateHasChanged);
    }

    public async Task Close()
    {
        await ToastService.RemoveToastAsync(Toast);
    }

    public void Dispose()
    {
        _countdownTimer?.Dispose();
        _countdownTimer = null;
    }
}
